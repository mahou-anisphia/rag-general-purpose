// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    documents     Document[]
    chats         Chat[]
}

model Document {
    id          String            @id @default(cuid())
    name        String
    fileName    String
    fileKey     String            @unique // S3/MinIO file key
    contentType String
    fileSize    Int
    status      DocumentStatus    @default(PENDING)
    source      DocumentSource    @default(MANUAL_UPLOAD)
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    rawText     String?           @db.Text // Extracted text content from PDF
    uploadedBy   User   @relation(fields: [uploadedById], references: [id])
    uploadedById String

    @@index([uploadedById])
    @@index([status])
    @@index([createdAt])
}

enum DocumentStatus {
    PENDING
    PROCESSING
    INDEXED
    ERROR
}

enum DocumentSource {
    MANUAL_UPLOAD
    EMAIL_INGEST
    API_UPLOAD
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Chat {
    id        String   @id @default(cuid())
    title     String?  // Optional title for the chat (can be auto-generated from first message)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    messages  Message[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([createdAt])
}

model Message {
    id        String      @id @default(cuid())
    content   String      @db.Text
    role      MessageRole
    chatId    String
    chat      Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
    sources   MessageSource[] // Related document sources for context
    createdAt DateTime    @default(now())

    @@index([chatId])
    @@index([createdAt])
}

model MessageSource {
    id        String  @id @default(cuid())
    messageId String
    message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
    title     String  // Document title or chunk reference
    snippet   String  @db.Text // Relevant text snippet
    page      Int?    // Page number if applicable
    score     Float?  // Similarity score from vector search
    documentId String? // Reference to source document

    @@index([messageId])
}

enum MessageRole {
    USER
    ASSISTANT
    SYSTEM
}
