version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kurubot_password}
      POSTGRES_DB: ${POSTGRES_DB:-kurubot}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - kurubot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.8.1
    restart: unless-stopped
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - kurubot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO S3-Compatible Storage
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin123}
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    networks:
      - kurubot-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Bucket Initialization
  minio-init:
    image: minio/mc:RELEASE.2024-01-13T08-44-48Z
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - kurubot-network
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 ${MINIO_ACCESS_KEY:-minioadmin} ${MINIO_SECRET_KEY:-minioadmin123};
      mc mb minio/${MINIO_BUCKET:-kurubot-documents} --ignore-existing;
      mc policy set public minio/${MINIO_BUCKET:-kurubot-documents};
      exit 0;
      "

  # KuruBot Application
  kurubot:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-kurubot_password}@postgres:5432/${POSTGRES_DB:-kurubot}

      # Authentication
      AUTH_SECRET: ${AUTH_SECRET:-your-super-secret-auth-secret-here}
      AUTH_DISCORD_ID: ${AUTH_DISCORD_ID}
      AUTH_DISCORD_SECRET: ${AUTH_DISCORD_SECRET}

      # MinIO/S3 Storage
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
      MINIO_BUCKET: ${MINIO_BUCKET:-kurubot-documents}

      # Qdrant Vector Database
      QDRANT_URL: http://qdrant:6333
      QDRANT_COLLECTION: ${QDRANT_COLLECTION:-documents}

      # AI Services (Required - set in .env file)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_EMBEDDING_MODEL: ${OPENAI_EMBEDDING_MODEL:-text-embedding-3-large}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      ANTHROPIC_CLAUDE_MODEL: ${ANTHROPIC_CLAUDE_MODEL:-claude-3-5-sonnet-20241022}

      # App settings
      NODE_ENV: production
      SKIP_ENV_VALIDATION: 1
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    networks:
      - kurubot-network
    command: >
      sh -c "
      echo 'Waiting for services to be ready...';
      sleep 10;
      echo 'Running database migrations...';
      npx prisma migrate deploy;
      echo 'Starting application...';
      node server.js
      "

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  minio_data:
    driver: local

networks:
  kurubot-network:
    driver: bridge
